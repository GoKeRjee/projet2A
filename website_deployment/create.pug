extends template
block title
  h1 Generate your site
block content
  div.form
    form(onsubmit='submitForm(event)', action='/createSite', method='POST')
      label(for='directory') Directory name:
      input#directory(type='text', name='directory', pattern='[A-Za-z0-9_-]+', placeholder="Example: my_new_site", onfocus="this.placeholder = ''", title="Special characters and spaces are not accepted", class='form-control', onblur='checkDirectoryNameAvailability(event)', required)
      span#error-message-directory
      br
      label(for='name') Website name:
      input#name(type='text', name='name', placeholder="Example: my new site!", onfocus="this.placeholder = ''", title="Enter the desired site name", class='form-control', onblur='checkSiteNameAvailability(event)', required)
      span#error-message-name
      br
      label(for='port') Port:
      input#port(type='text', name='port', pattern='([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$',  placeholder="Example: 2030", onfocus="this.placeholder = ''", title="Enter the desired site port", class='form-control', onblur='checkPortAvailability(event)', required)
      span#error-message-port
      br
      label(for='dbname') Database name:
      input#dbname(type='text', name='dbname', pattern='[A-Za-z0-9_-]+', placeholder="Example: my_db_name", onfocus="this.placeholder = ''", title="Special characters and spaces are not accepted", class='form-control', onblur='checkDatabaseNameAvailability(event)', required)
      span#error-message-dbname
      br
      div.center
        button#button-submit(type='submit') Create

      script. 
        function submitForm(event) {
          event.preventDefault();

          const directoryInput = document.querySelector('#directory');
          const portInput = document.querySelector('#port');
          const nameInput = document.querySelector('#name');
          const dbnameInput = document.querySelector('#dbname');

          // Check the validity of inputs
          const directoryValid = directoryInput.style.borderColor !== 'red';
          const portValid = portInput.style.borderColor !== 'red';
          const nameValid = nameInput.style.borderColor !== 'red';
          const dbnameValid = dbnameInput.style.borderColor !== 'red';

          if (directoryValid && portValid && nameValid && dbnameValid) {
            alert('Wait a few seconds, your site is being created. This operation may take several seconds.');
            event.target.submit();
          } else {
            alert('Please correct the errors in the form before submitting.');
          }
        }

        async function checkDirectoryNameAvailability(event){
          const dtnameInput = event.target;
          const dtname = dtnameInput.value;
          const errorMessageSpan = document.querySelector('#error-message-directory');

          if (dtname) {
            try {
              const response = await fetch(`/isDirectoryNameUsed/${encodeURIComponent(dtname)}`);
              const data = await response.json();

              if (data.dtnameUsed) {
                dtnameInput.style.borderColor = 'red';
                errorMessageSpan.textContent = 'Directory name already used';
                errorMessageSpan.style.color = 'red';
              } else {
                dtnameInput.style.borderColor = 'green';
                errorMessageSpan.textContent = '';
              }
            } catch (error) {
              console.error('Error checking directory name availability:', error);
            }
          }
        }

        async function checkSiteNameAvailability(event) {
          const nameInput = event.target;
          const name = nameInput.value;
          const errorMessageSpan = document.querySelector('#error-message-name');

          if (name) {
            try {
              const response = await fetch(`/isSiteNameUsed/${encodeURIComponent(name)}`);
              const data = await response.json();

              if (data.nameUsed) {
                nameInput.style.borderColor = 'red';
                errorMessageSpan.textContent = 'Site name already used';
                errorMessageSpan.style.color = 'red';
              } else {
                nameInput.style.borderColor = 'green';
                errorMessageSpan.textContent = '';
              }
            } catch (error) {
              console.error('Error checking site name availability:', error);
            }
          }
        }

        async function checkPortAvailability(event) {
          const portInput = event.target;
          const port = portInput.value;
          const errorMessageSpan = document.querySelector('#error-message-port');

          if (port) {
            try {
              if(port == 3030){
                portInput.style.borderColor = 'red';
                errorMessageSpan.textContent = 'Port 3030 cannot be used';
                errorMessageSpan.style.color = 'red';
              } else {
                const response = await fetch(`/isPortUsed/${encodeURIComponent(port)}`);
                const data = await response.json();

                if (data.portUsed) {
                  portInput.style.borderColor = 'red';
                  errorMessageSpan.textContent = 'Port already used';
                  errorMessageSpan.style.color = 'red';
                } else {
                  portInput.style.borderColor = 'green';
                  errorMessageSpan.textContent = '';
                }
              }
            } catch (error) {
              console.error('Error checking port availability:', error);
            }
          }
        }

        async function checkDatabaseNameAvailability(event){
          const dbnameInput = event.target;
          const dbname = dbnameInput.value;
          const errorMessageSpan = document.querySelector('#error-message-dbname');

          if (dbname) {
            try {
              const response = await fetch(`/isDbNameUsed/${encodeURIComponent(dbname)}`);
              const data = await response.json();

              if (data.dbnameUsed) {
                dbnameInput.style.borderColor = 'red';
                errorMessageSpan.textContent = 'Database name already used';
                errorMessageSpan.style.color = 'red';
              } else {
                dbnameInput.style.borderColor = 'green';
                errorMessageSpan.textContent = '';
              }
            } catch (error) {
              console.error('Error checking dbname availability:', error);
            }
          }
        }
