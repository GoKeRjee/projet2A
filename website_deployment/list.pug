extends template
block title 
  h1 List of created sites
block content
  table.tableau-style
    thead
      tr
        th(onclick="sortTable(0)") Name of websites &#9650;&#9660;
        th(onclick="sortTable(1)") Name of databases &#9650;&#9660;
        th(onclick="sortTable(2)") Port &#9650;&#9660;
        th(onclick="sortTable(3)") Status &#9650;&#9660;
        th.center Actions
        script.
          function sortTable(n) {
            let table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.querySelector(".tableau-style");
            switching = true;
            dir = "asc";
              
            while (switching) {
              switching = false;
              rows = table.rows;
              for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                if (dir == "asc") {
                  if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    shouldSwitch = true;
                    break;
                  }
                } else if (dir == "desc") {
                  if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                    shouldSwitch = true;
                    break;
                  }
                }
              }
              if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                switchcount++;
              } else {
                if (switchcount == 0 && dir == "asc") {
                  dir = "desc";
                  switching = true;
                }
              }
            }
          }
    tbody
      each site in sites
        tr(id=`site-${site._id}`)
          td= site.name
          td= site.dbname
          td= site.port
          td 
            span.netstat(id=`status-${site._id}`)= site.status
          td
            form.form-inline(action='/deleteSite', method='post')
              input(type='hidden', name='id', value=site._id)
              button.button-style-red(type='submit', onclick='return confirmDelete()', disabled=!isAdmin) Delete
            form.form-inline(action='/stopSite', method='post')
              input(type='hidden', name='id', value=site._id)
              button.button-style-yellow(type='submit', onclick='return confirmStop()', disabled=!isAdmin) Stop
            form.form-inline(action='/startSite', method='post')
              input(type='hidden', name='id', value=site._id)
              button#button-submit(type='submit', onclick='return confirmStart()', disabled=!isAdmin) Start
            form.form-inline(action='/deploySite', method='post')
              input(type='hidden', name='id', value=site._id)
              button.button-style-blue(type='submit', onclick='return confirmDeploy()', disabled=true) Deploy
      script.
        document.addEventListener('DOMContentLoaded', function() {
          const executions = document.querySelectorAll('span.netstat');
          console.log(executions.length);
          executions.forEach((execution) => {
            const status = execution.innerHTML;
            switch (status) {
              case "OFF":
                execution.style.color = '#FF0000';
                break;
              case "ON":
                execution.style.color = '#008000';
                break;
              default:
                execution.style.color = '#000000'; // default color if neither "Off" nor "On"
            }
          });
        });

        async function updateSiteStatus() {
          try {
            const response = await fetch('/siteStatus');
            const data = await response.json();

            data.forEach(site => {
              const siteStatusElement = document.querySelector(`#status-${site._id}`);
              siteStatusElement.textContent = site.status;

              switch (site.status) {
                case "OFF":
                  siteStatusElement.style.color = '#FF0000';
                  break;
                case "ON":
                  siteStatusElement.style.color = '#008000';
                  break;
                default:
                  siteStatusElement.style.color = '#000000'; // default color if neither "Off" nor "On"
              }
            });
          } catch (error) {
            console.error('Erreur lors de la récupération des statuts des sites:', error);
          }
        }

        const UPDATE_INTERVAL = 5000; // Temps en millisecondes, ici 5 secondes
        setInterval(updateSiteStatus, UPDATE_INTERVAL);
        
        function confirmDelete() {
          return confirm('Êtes-vous sûr de vouloir supprimer ce site ?');
        }

        function confirmStop() {
          return confirm('Êtes-vous sûr de vouloir arrêter ce site ?');
        }

        function confirmStart() {
          return confirm('Êtes-vous sûr de vouloir démarrer ce site ?');
        }

        function confirmDeploy() {
          return confirm('Êtes-vous sûr de vouloir déployer ce site ?');
        }