extends template
block title
  h1 Edit your site
block content
  if noSites
    p No sites available.
  else
    div.form
      form(onsubmit='submitForm(event)', action='/updateSite', method='POST')
        label(for="site") Site:
        select(name='site', id='site', onchange='updateSiteId()')
          each site in sites
            option(value=site._id) #{site.name}
        input(type='hidden', name='id', id='id', value=sites[0]._id)
        br
        label(for="name") New Name:
        input(type='text', name='name', id='name', placeholder="Example: my new site!", onfocus="this.placeholder = ''", onblur='checkSiteNameAvailability(event)', required)
        span#error-message-name
        label(for="port") New Port:
        input(type='text', name='port', id='port', pattern='^(?!3030)([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$',  placeholder="Example: 2030", onfocus="this.placeholder = ''", onblur='checkPortAvailability(event)', required)
        span#error-message-port
        input(type='submit', value='Update Site')

        script.
          function updateSiteId() {
            const siteSelect = document.getElementById('site');
            const idInput = document.getElementById('id');
            idInput.value = siteSelect.value;
          }

        script. 
          function submitForm(event) {
            event.preventDefault();

            const portInput = document.querySelector('#port');
            const nameInput = document.querySelector('#name');

            // Check if port and name are valid
            const portValid = portInput.style.borderColor !== 'red';
            const nameValid = nameInput.style.borderColor !== 'red';

            if (portValid && nameValid) {
              alert('Your website has been successfully updated!');
              event.target.submit();
            } else {
              alert('Please correct the errors in the form before submitting.');
            }
          }

          async function checkSiteNameAvailability(event) {
            const nameInput = event.target;
            const name = nameInput.value;
            const errorMessageSpan = document.querySelector('#error-message-name');

            if (name) {
              try {
                const response = await fetch(`/isSiteNameUsed/${encodeURIComponent(name)}`);
                const data = await response.json();

                if (data.nameUsed) {
                  nameInput.style.borderColor = 'red';
                  errorMessageSpan.textContent = 'Site name already used';
                  errorMessageSpan.style.color = 'red';
                } else {
                  nameInput.style.borderColor = 'green';
                  errorMessageSpan.textContent = '';
                }
              } catch (error) {
                console.error('Error checking site name availability:', error);
              }
            }
          }

          async function checkPortAvailability(event) {
            const portInput = event.target;
            const port = portInput.value;
            const errorMessageSpan = document.querySelector('#error-message-port');

            if (port) {
              try {
                const response = await fetch(`/isPortUsed/${encodeURIComponent(port)}`);
                const data = await response.json();

                if (data.portUsed) {
                  portInput.style.borderColor = 'red';
                  errorMessageSpan.textContent = 'Port already used';
                  errorMessageSpan.style.color = 'red';
                } else {
                  portInput.style.borderColor = 'green';
                  errorMessageSpan.textContent = '';
                }
              } catch (error) {
                console.error('Error checking port availability:', error);
              }
            }
          }